This is Crosser release 0.6.6

This release contains dll stack builder (dllstack.sh) for building
windows library stack and toolchain builder (crosser.sh).

------

Crosser homepage is http://www.cazfi.net/crosser/
Please report any bugs to Bugzilla at https://www.cazfi.net/bugs/index.cgi

------

Script scripts/download_packets.sh downloads toolchain related source packages.

- It can be used to download single package, predefined set of packages, or all packages
- Versions to download are read from setups/<VERSIONSET>.versions, where
  default versionset is 'current'. Other sets can be selected from commandline.
- You can define mirrors to be used in file called .crosser.mirrors in your
  home directory or mirrors.conf in crosser root directory.
  There's example file suitable for Finland in mirrors-directory.

------

 Crosser.sh is used to create toolchains.

 Example:
 > ./crosser.sh arm-elf native:baselib

  First parameter is target configuration to use. Currently supported target
 configurations are i686-linux, x86_64-linux, arm-linux, arm-eglibc,
 i686-eglibc and arm-elf.

  Second parameter is definition of steps to execute. You can provide comma
 separated list of steps, or range with start and end separated by semicolon,
 or any combination of these.
  Examples: "native" "native,chain" "native:baselib" "native:chain,baselib"
  Steps relevant for crosser.sh are:
  native  - This step builds native tools used in later steps. You can use
            same native environment for all your different target chains.
  chain   - Actual cross-compilers
  baselib - A couple of basic libraries for target
  xorg    - Some X libraries
  gtk     - A couple of gtk+ dependency libraries, but not yet gtk+ itself
            This step is not available on arm-elf target
  sdl     - sdl dependencies and sdl library itself
            This step is not available on arm architecture targets
  comp    - native compiler to target

  Third parameter is versionset to use. Default is "current". Versionsets
 are defined in setups/<versionset>.versions files, one per file. By listing
 these files you can list supported versionsets.
  Currently there is three versionsets:
  current      - This versionset will always contain currently best supported
                 versionlist.
  stable       - This versionset contains a bit more mature versions.
                 Typically those are final (most mature) versions from
                 previous release series of the software.
  experimental - Experimental versions for crosser.sh. This list
                 does not necessarily even work out-of-the-box.

------

 Dllstack.sh is used to create set of Windows dlls.

 Example:
 > ./dllstack.sh /usr/local/dllstack

 First parameter is prefix for installation directory hierarchy.

 Second parameter is versionset to use. See crosser.sh documentation above
 for list of possible versionsets.

------

 Script scripts/trim_packetdir.sh can be used to clean up obsolete source
packets from packetdir. Usually source packet gets obsolete because
newer version is used by all the versionsets in newer crosser version
than the one that originally downloaded packet.

 It does not really know which packets are obsolete and which ones are not.
It just removes those packets that are most likely obsolete. It determines
this by checking last time that source package was used by crosser. Those
packets which are not used in a long time are removed. Currently 
trim_packetdir.sh removes all but 200 most recently used files from packetdir.

------

 It takes some effort to setup crosser to handle multiple simultaneous
builds. Obviously one run should not delete directories that the other one
is using. All the solutions to this boil down to having different
configurations for different builds, namely doing them in separate directories.
You can simply define multiple configuration files that use different
directories for anything that may affect the other build and then set
$CROSSER_CONF to point to correct file before each build. But probably more
clever way is to write your configuration file to dynamically adjust. You
can for example place all the other directories relative to $CROSSER_TMPDIR
and to just set different $CROSSER_TMPDIR for each build. Note that with
default setting $CROSSER_SRCDIR and $CROSSER_BUILDDIR are already relative to
$CROSSER_TMPDIR meaning there is problem with $CROSSER_LOGDIR only.
If you don't like the idea of logs being under tmpdir, you can even define
your own toplevel environment variable and to make both $CROSSER_TMPDIR and
$CROSSER_LOGDIR relative to it.
