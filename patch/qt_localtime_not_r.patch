diff -Nurd qt-everywhere-src-5.13.0/qtbase/src/corelib/tools/qdatetime.cpp qt-everywhere-src-5.13.0/qtbase/src/corelib/tools/qdatetime.cpp
--- qt-everywhere-src-5.13.0/qtbase/src/corelib/tools/qdatetime.cpp	2019-06-22 20:51:00.102901901 +0300
+++ qt-everywhere-src-5.13.0/qtbase/src/corelib/tools/qdatetime.cpp	2019-06-22 20:18:15.498370784 +0300
@@ -2346,7 +2346,8 @@
     // localtime_r() does not have this constraint, so make an explicit call.
     // The explicit call should also request the timezone info be re-parsed.
     qTzSet();
-#if QT_CONFIG(thread) && defined(_POSIX_THREAD_SAFE_FUNCTIONS)
+//#if QT_CONFIG(thread) && defined(_POSIX_THREAD_SAFE_FUNCTIONS)
+#if 0
     // Use the reentrant version of localtime() where available
     // as is thread-safe and doesn't use a shared static data area
     tm *res = 0;
diff -Nurd qt-everywhere-src-5.13.0/qtdeclarative/src/qml/jsruntime/qv4dateobject.cpp qt-everywhere-src-5.13.0/qtdeclarative/src/qml/jsruntime/qv4dateobject.cpp
--- qt-everywhere-src-5.13.0/qtdeclarative/src/qml/jsruntime/qv4dateobject.cpp	2019-05-09 07:28:41.000000000 +0300
+++ qt-everywhere-src-5.13.0/qtdeclarative/src/qml/jsruntime/qv4dateobject.cpp	2019-06-22 20:51:32.330778742 +0300
@@ -342,7 +342,8 @@
     __time64_t  tt = (__time64_t)(t / msPerSecond);
     // _localtime_64_s returns non-zero on failure
     if (_localtime64_s(&tmtm, &tt) != 0)
-#elif !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS)
+//#elif !defined(QT_NO_THREAD) && defined(_POSIX_THREAD_SAFE_FUNCTIONS)
+#elif 0
     long int tt = (long int)(t / msPerSecond);
     if (!localtime_r((const time_t*) &tt, &tmtm))
 #else
