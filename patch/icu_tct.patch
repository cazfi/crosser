diff -Nurd icu/source/common/Makefile.in icu/source/common/Makefile.in
--- icu/source/common/Makefile.in	2021-04-21 06:55:07.705036898 +0300
+++ icu/source/common/Makefile.in	2021-04-21 06:48:49.821497413 +0300
@@ -77,7 +77,7 @@
 endif
 
 # $(LIBICUDT) is either stub data or the real DLL common data.
-LIBS = $(LIBICUDT) $(DEFAULT_LIBS)
+LIBS = $(LIBICUDT) $(DEFAULT_LIBS) -ltinycthread
 
 OBJECTS = errorcode.o putil.o umath.o utypes.o uinvchar.o umutex.o ucln_cmn.o \
 uinit.o uobject.o cmemory.o charstr.o cstr.o \
diff -Nurd icu/source/common/umutex.cpp icu/source/common/umutex.cpp
--- icu/source/common/umutex.cpp	2021-04-21 06:55:07.705036898 +0300
+++ icu/source/common/umutex.cpp	2021-04-21 06:48:49.821497413 +0300
@@ -52,7 +52,7 @@
     if (mutex == nullptr) {
         mutex = globalMutex();
     }
-    mutex->fMutex.lock();
+    mtx_lock(mutex->fMutex);
 }
 
 
@@ -62,7 +62,7 @@
     if (mutex == nullptr) {
         mutex = globalMutex();
     }
-    mutex->fMutex.unlock();
+    mtx_unlock(mutex->fMutex);
 }
 
 UConditionVar::UConditionVar() : fCV() {
@@ -76,19 +76,19 @@
     if (mutex == nullptr) {
         mutex = globalMutex();
     }
-    cond->fCV.wait(mutex->fMutex);
+    cnd_wait(cond->fCV, mutex->fMutex);
 }
 
 
 U_CAPI void U_EXPORT2
 umtx_condBroadcast(UConditionVar *cond) {
-    cond->fCV.notify_all();
+    cnd_broadcast(cond->fCV);
 }
 
 
 U_CAPI void U_EXPORT2
 umtx_condSignal(UConditionVar *cond) {
-    cond->fCV.notify_one();
+    cnd_signal(cond->fCV);
 }
 
 
@@ -98,14 +98,24 @@
  *
  *************************************************************************************************/
 
-static std::mutex &initMutex() {
-    static std::mutex m;
-    return m;
+static mtx_t *initMutex() {
+    static mtx_t m;
+    static bool init = false;
+    if (!init) {
+      init = true;
+      mtx_init(&m, 0);
+    }
+    return &m;
 }
 
-static std::condition_variable &initCondition() {
-    static std::condition_variable cv;
-    return cv;
+static cnd_t *initCondition() {
+    static cnd_t cv;
+    static bool init = false;
+    if (!init) {
+      init = true;
+      cnd_init(&cv);
+    }
+    return &cv;
 }
 
 
@@ -119,7 +129,11 @@
 //
 U_COMMON_API UBool U_EXPORT2
 umtx_initImplPreInit(UInitOnce &uio) {
-    std::unique_lock<std::mutex> lock(initMutex());
+    static mtx_t *lock = nullptr;
+
+    if (!lock) {
+        lock = initMutex();
+    }
 
     if (umtx_loadAcquire(uio.fState) == 0) {
         umtx_storeRelease(uio.fState, 1);
@@ -128,7 +142,7 @@
         while (umtx_loadAcquire(uio.fState) == 1) {
             // Another thread is currently running the initialization.
             // Wait until it completes.
-            initCondition().wait(lock);
+            cnd_wait(initCondition(), lock);
         }
         U_ASSERT(uio.fState == 2);
         return false;
@@ -145,10 +159,14 @@
 U_COMMON_API void U_EXPORT2
 umtx_initImplPostInit(UInitOnce &uio) {
     {
-        std::unique_lock<std::mutex> lock(initMutex());
+        static mtx_t *lock = nullptr;
+
+        if (!lock) {
+            lock = initMutex();
+        }
         umtx_storeRelease(uio.fState, 2);
     }
-    initCondition().notify_all();
+    cnd_broadcast(initCondition());
 }
 
 U_NAMESPACE_END
diff -Nurd icu/source/common/umutex.h icu/source/common/umutex.h
--- icu/source/common/umutex.h	2021-04-21 06:55:07.705036898 +0300
+++ icu/source/common/umutex.h	2021-04-21 06:56:34.053844642 +0300
@@ -21,8 +21,10 @@
 #define UMUTEX_H
 
 #include <atomic>
-#include <condition_variable>
-#include <mutex>
+
+extern "C" {
+#include <tinycthread.h>
+}
 
 #include "unicode/utypes.h"
 #include "unicode/uclean.h"
@@ -195,7 +197,7 @@
     UMutex(const UMutex &other) = delete;
     UMutex &operator =(const UMutex &other) = delete;
 
-    std::mutex   fMutex = {};    // Note: struct - pubic members - because most access is from
+    mtx_t   *fMutex = {};    // Note: struct - pubic members - because most access is from
     //                           //       plain C style functions (umtx_lock(), etc.)
 };
 
@@ -206,7 +208,7 @@
     UConditionVar(const UConditionVar &other) = delete;
     UConditionVar &operator =(const UConditionVar &other) = delete;
 
-    std::condition_variable_any fCV;
+    cnd_t *fCV;
 };
 
 #define U_MUTEX_INITIALIZER {}
