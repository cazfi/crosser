diff -Nurd SDL2-2.0.4/src/render/direct3d11/SDL_render_d3d11.c SDL2-2.0.4/src/render/direct3d11/SDL_render_d3d11.c
--- SDL2-2.0.4/src/render/direct3d11/SDL_render_d3d11.c	2016-01-07 10:58:43.278167649 +0200
+++ SDL2-2.0.4/src/render/direct3d11/SDL_render_d3d11.c	2016-01-07 10:59:42.154044899 +0200
@@ -961,7 +961,7 @@
     blendDesc.RenderTarget[0].RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL;
     result = ID3D11Device_CreateBlendState(data->d3dDevice, &blendDesc, blendStateOutput);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBlendState", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateBlendMode, ID3D11Device1::CreateBlendState", result);
         return result;
     }
 
@@ -1043,14 +1043,14 @@
 
     result = CreateDXGIFactoryFunc(&IID_IDXGIFactory2, &data->dxgiFactory);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", CreateDXGIFactory", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, CreateDXGIFactory", result);
         goto done;
     }
 
     /* FIXME: Should we use the default adapter? */
     result = IDXGIFactory2_EnumAdapters(data->dxgiFactory, 0, &data->dxgiAdapter);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", D3D11CreateDevice", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, D3D11CreateDevice", result);
         goto done;
     }
 
@@ -1079,25 +1079,25 @@
         &d3dContext /* Returns the device immediate context. */
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", D3D11CreateDevice", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, D3D11CreateDevice", result);
         goto done;
     }
 
     result = ID3D11Device_QueryInterface(d3dDevice, &IID_ID3D11Device1, &data->d3dDevice);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device to ID3D11Device1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device to ID3D11Device1", result);
         goto done;
     }
 
     result = ID3D11DeviceContext_QueryInterface(d3dContext, &IID_ID3D11DeviceContext1, &data->d3dContext);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext to ID3D11DeviceContext1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11DeviceContext to ID3D11DeviceContext1", result);
         goto done;
     }
 
     result = ID3D11Device_QueryInterface(d3dDevice, &IID_IDXGIDevice1, &dxgiDevice);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device to IDXGIDevice1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device to IDXGIDevice1", result);
         goto done;
     }
 
@@ -1106,7 +1106,7 @@
      */
     result = IDXGIDevice1_SetMaximumFrameLatency(dxgiDevice, 1);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIDevice1::SetMaximumFrameLatency", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, IDXGIDevice1::SetMaximumFrameLatency", result);
         goto done;
     }
 
@@ -1135,7 +1135,7 @@
             break;
 
         default:
-            SDL_SetError(__FUNCTION__ ", Unexpected feature level: %d", data->featureLevel);
+            SDL_SetError("D3D11_CreateDeviceResource, Unexpected feature level: %d", data->featureLevel);
             result = E_FAIL;
             goto done;
     }
@@ -1148,7 +1148,7 @@
         &data->vertexShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateVertexShader", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateVertexShader", result);
         goto done;
     }
 
@@ -1161,7 +1161,7 @@
         &data->inputLayout
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateInputLayout", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateInputLayout", result);
         goto done;
     }
 
@@ -1173,7 +1173,7 @@
         &data->colorPixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['color' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['color' shader]", result);
         goto done;
     }
 
@@ -1184,7 +1184,7 @@
         &data->texturePixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['textures' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['textures' shader]", result);
         goto done;
     }
 
@@ -1195,7 +1195,7 @@
         &data->yuvPixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['yuv' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['yuv' shader]", result);
         goto done;
     }
 
@@ -1210,7 +1210,7 @@
         &data->vertexShaderConstants
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBuffer [vertex shader constants]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateBuffer [vertex shader constants]", result);
         goto done;
     }
 
@@ -1230,7 +1230,7 @@
         &data->nearestPixelSampler
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateSamplerState [nearest-pixel filter]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateSamplerState [nearest-pixel filter]", result);
         goto done;
     }
 
@@ -1240,7 +1240,7 @@
         &data->linearSampler
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateSamplerState [linear filter]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateSamplerState [linear filter]", result);
         goto done;
     }
 
@@ -1258,14 +1258,14 @@
     rasterDesc.SlopeScaledDepthBias = 0.0f;
     result = ID3D11Device_CreateRasterizerState(data->d3dDevice, &rasterDesc, &data->mainRasterizer);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRasterizerState [main rasterizer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateRasterizerState [main rasterizer]", result);
         goto done;
     }
 
     rasterDesc.ScissorEnable = TRUE;
     result = ID3D11Device_CreateRasterizerState(data->d3dDevice, &rasterDesc, &data->clippedRasterizer);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRasterizerState [clipped rasterizer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateRasterizerState [clipped rasterizer]", result);
         goto done;
     }
 
@@ -1444,7 +1444,7 @@
             &data->swapChain
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForCoreWindow", result);
+            WIN_SetErrorFromHRESULT("D3D1_CreateSwapChain, IDXGIFactory2::CreateSwapChainForCoreWindow", result);
             goto done;
         }
     } else if (usingXAML) {
@@ -1454,18 +1454,18 @@
             NULL,
             &data->swapChain);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForComposition", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, IDXGIFactory2::CreateSwapChainForComposition", result);
             goto done;
         }
 
 #if WINAPI_FAMILY == WINAPI_FAMILY_APP
         result = ISwapChainBackgroundPanelNative_SetSwapChain(WINRT_GlobalSwapChainBackgroundPanelNative, (IDXGISwapChain *) data->swapChain);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ISwapChainBackgroundPanelNative::SetSwapChain", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, ISwapChainBackgroundPanelNative::SetSwapChain", result);
             goto done;
         }
 #else
-        SDL_SetError(__FUNCTION__ ", XAML support is not yet available for Windows Phone");
+        SDL_SetError("D3D11_CreateSwapChain, XAML support is not yet available for Windows Phone");
         result = E_FAIL;
         goto done;
 #endif
@@ -1484,13 +1484,13 @@
             &data->swapChain
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForHwnd", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, IDXGIFactory2::CreateSwapChainForHwnd", result);
             goto done;
         }
 
         IDXGIFactory_MakeWindowAssociation(data->dxgiFactory, windowinfo.info.win.window, DXGI_MWA_NO_WINDOW_CHANGES);
 #else
-        SDL_SetError(__FUNCTION__", Unable to find something to attach a swap chain to");
+        SDL_SetError("D3D11_CreateSwapChain, Unable to find something to attach a swap chain to");
         goto done;
 #endif  /* ifdef __WIN32__ / else */
     }
@@ -1545,7 +1545,7 @@
              */
             goto done;
         } else if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::ResizeBuffers", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain::ResizeBuffers", result);
             goto done;
         }
 #endif
@@ -1576,7 +1576,7 @@
     if (data->swapEffect == DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL) {
         result = IDXGISwapChain1_SetRotation(data->swapChain, data->rotation);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain1::SetRotation", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain1::SetRotation", result);
             goto done;
         }
     }
@@ -1588,7 +1588,7 @@
         &backBuffer
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::GetBuffer [back-buffer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain::GetBuffer [back-buffer]", result);
         goto done;
     }
 
@@ -1599,7 +1599,7 @@
         &data->mainRenderTargetView
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device::CreateRenderTargetView", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, ID3D11Device::CreateRenderTargetView", result);
         goto done;
     }
 
@@ -1663,7 +1663,7 @@
 
     result = ID3D11Device_QueryInterface(data->d3dDevice, &IID_IDXGIDevice3, &dxgiDevice);
     if (FAILED(result)) {
-        //WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device to IDXGIDevice3", result);
+        //WIN_SetErrorFromHRESULT("D3D11_Trim, ID3D11Device to IDXGIDevice3", result);
         return;
     }
 
@@ -1747,7 +1747,7 @@
         );
     if (FAILED(result)) {
         D3D11_DestroyTexture(renderer, texture);
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
         return -1;
     }
 
@@ -1765,7 +1765,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
             return -1;
         }
 
@@ -1776,7 +1776,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
             return -1;
         }
     }
@@ -1792,7 +1792,7 @@
         );
     if (FAILED(result)) {
         D3D11_DestroyTexture(renderer, texture);
-        WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+        WIN_SetErrorFromHRESULT("D3D11CCreateTexture ID3D11Device1::CreateShaderResourceView", result);
         return -1;
     }
 
@@ -1804,7 +1804,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture ID3D11Device1::CreateShaderResourceView", result);
             return -1;
         }
         result = ID3D11Device_CreateShaderResourceView(rendererData->d3dDevice,
@@ -1814,7 +1814,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture ID3D11Device1::CreateShaderResourceView", result);
             return -1;
         }
     }
@@ -1831,7 +1831,7 @@
             &textureData->mainTextureRenderTargetView);
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRenderTargetView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture, ID3D11Device1::CreateRenderTargetView", result);
             return -1;
         }
     }
@@ -1887,7 +1887,7 @@
         NULL,
         &stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_UpdateTextureInternal, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         return -1;
     }
 
@@ -1900,7 +1900,7 @@
         &textureMemory
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_UpdateTextureInternal, ID3D11DeviceContext1::Map [map staging texture]", result);
         SAFE_RELEASE(stagingTexture);
         return -1;
     }
@@ -2062,7 +2062,7 @@
         NULL,
         &textureData->stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_LockTexture, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         return -1;
     }
 
@@ -2075,7 +2075,7 @@
         &textureMemory
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_LockTexture, ID3D11DeviceContext1::Map [map staging texture]", result);
         SAFE_RELEASE(textureData->stagingTexture);
         return -1;
     }
@@ -2359,7 +2359,7 @@
             &mappedResource
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [vertex buffer]", result);
+            WIN_SetErrorFromHRESULT("D3D11_UpdateVertexBuffer, ID3D11DeviceContext1::Map [vertex buffer]", result);
             return -1;
         }
         SDL_memcpy(mappedResource.pData, vertexData, dataSizeInBytes);
@@ -2383,7 +2383,7 @@
             &rendererData->vertexBuffer
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBuffer [vertex buffer]", result);
+            WIN_SetErrorFromHRESULT("D3D11_UpdateVertexBuffer, ID3D11Device1::CreateBuffer [vertex buffer]", result);
             return -1;
         }
 
@@ -2853,7 +2853,7 @@
         &backBuffer
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain1::GetBuffer [get back buffer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, IDXGISwapChain1::GetBuffer [get back buffer]", result);
         goto done;
     }
 
@@ -2870,7 +2870,7 @@
         NULL,
         &stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         goto done;
     }
 
@@ -2902,7 +2902,7 @@
         0,
         &textureMemory);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, ID3D11DeviceContext1::Map [map staging texture]", result);
         goto done;
     }
 
@@ -2921,7 +2921,7 @@
          * Get the error message, and attach some extra data to it.
          */
         char errorMessage[1024];
-        SDL_snprintf(errorMessage, sizeof(errorMessage), __FUNCTION__ ", Convert Pixels failed: %s", SDL_GetError());
+        SDL_snprintf(errorMessage, sizeof(errorMessage), "D3D11_RenderReadPixels, Convert Pixels failed: %s", SDL_GetError());
         SDL_SetError("%s", errorMessage);
         goto done;
     }
@@ -2991,7 +2991,7 @@
             /* We probably went through a fullscreen <-> windowed transition */
             D3D11_CreateWindowSizeDependentResources(renderer);
         } else {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::Present", result);
+            WIN_SetErrorFromHRESULT("D3D11_RenderPresent, IDXGISwapChain::Present", result);
         }
     }
 }
