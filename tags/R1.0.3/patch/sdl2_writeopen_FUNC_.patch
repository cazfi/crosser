diff -Nurd SDL2-2.0.3/src/render/direct3d11/SDL_render_d3d11.c SDL2-2.0.3/src/render/direct3d11/SDL_render_d3d11.c
--- SDL2-2.0.3/src/render/direct3d11/SDL_render_d3d11.c	2015-08-30 19:57:56.481840331 +0300
+++ SDL2-2.0.3/src/render/direct3d11/SDL_render_d3d11.c	2015-08-30 20:00:09.957562908 +0300
@@ -910,7 +910,7 @@
     blendDesc.RenderTarget[0].RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL;
     result = ID3D11Device_CreateBlendState(data->d3dDevice, &blendDesc, blendStateOutput);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBlendState", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateBlendMode, ID3D11Device1::CreateBlendState", result);
         return result;
     }
 
@@ -992,14 +992,14 @@
 
     result = CreateDXGIFactoryFunc(&IID_IDXGIFactory2, &data->dxgiFactory);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", CreateDXGIFactory", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, CreateDXGIFactory", result);
         goto done;
     }
 
     /* FIXME: Should we use the default adapter? */
     result = IDXGIFactory2_EnumAdapters(data->dxgiFactory, 0, &data->dxgiAdapter);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", D3D11CreateDevice", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, D3D11CreateDevice", result);
         goto done;
     }
 
@@ -1028,25 +1028,25 @@
         &d3dContext /* Returns the device immediate context. */
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", D3D11CreateDevice", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, D3D11CreateDevice", result);
         goto done;
     }
 
     result = ID3D11Device_QueryInterface(d3dDevice, &IID_ID3D11Device1, &data->d3dDevice);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device to ID3D11Device1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device to ID3D11Device1", result);
         goto done;
     }
 
     result = ID3D11DeviceContext_QueryInterface(d3dContext, &IID_ID3D11DeviceContext1, &data->d3dContext);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext to ID3D11DeviceContext1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11DeviceContext to ID3D11DeviceContext1", result);
         goto done;
     }
 
     result = ID3D11Device_QueryInterface(d3dDevice, &IID_IDXGIDevice1, &dxgiDevice);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device to IDXGIDevice1", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device to IDXGIDevice1", result);
         goto done;
     }
 
@@ -1055,7 +1055,7 @@
      */
     result = IDXGIDevice1_SetMaximumFrameLatency(dxgiDevice, 1);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIDevice1::SetMaximumFrameLatency", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, IDXGIDevice1::SetMaximumFrameLatency", result);
         goto done;
     }
 
@@ -1084,7 +1084,7 @@
             break;
 
         default:
-            SDL_SetError(__FUNCTION__ ", Unexpected feature level: %d", data->featureLevel);
+            SDL_SetError("D3D11_CreateDeviceResource, Unexpected feature level: %d", data->featureLevel);
             result = E_FAIL;
             goto done;
     }
@@ -1097,7 +1097,7 @@
         &data->vertexShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateVertexShader", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateVertexShader", result);
         goto done;
     }
 
@@ -1110,7 +1110,7 @@
         &data->inputLayout
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateInputLayout", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateInputLayout", result);
         goto done;
     }
 
@@ -1122,7 +1122,7 @@
         &data->colorPixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['color' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['color' shader]", result);
         goto done;
     }
 
@@ -1133,7 +1133,7 @@
         &data->texturePixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['textures' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['textures' shader]", result);
         goto done;
     }
 
@@ -1144,7 +1144,7 @@
         &data->yuvPixelShader
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreatePixelShader ['yuv' shader]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreatePixelShader ['yuv' shader]", result);
         goto done;
     }
 
@@ -1159,7 +1159,7 @@
         &data->vertexShaderConstants
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBuffer [vertex shader constants]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateBuffer [vertex shader constants]", result);
         goto done;
     }
 
@@ -1179,7 +1179,7 @@
         &data->nearestPixelSampler
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateSamplerState [nearest-pixel filter]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateSamplerState [nearest-pixel filter]", result);
         goto done;
     }
 
@@ -1189,7 +1189,7 @@
         &data->linearSampler
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateSamplerState [linear filter]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateSamplerState [linear filter]", result);
         goto done;
     }
 
@@ -1207,14 +1207,14 @@
     rasterDesc.SlopeScaledDepthBias = 0.0f;
     result = ID3D11Device_CreateRasterizerState(data->d3dDevice, &rasterDesc, &data->mainRasterizer);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRasterizerState [main rasterizer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateRasterizerState [main rasterizer]", result);
         goto done;
     }
 
     rasterDesc.ScissorEnable = TRUE;
     result = ID3D11Device_CreateRasterizerState(data->d3dDevice, &rasterDesc, &data->clippedRasterizer);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRasterizerState [clipped rasterizer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateDeviceResource, ID3D11Device1::CreateRasterizerState [clipped rasterizer]", result);
         goto done;
     }
 
@@ -1374,7 +1374,7 @@
             &data->swapChain
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForCoreWindow", result);
+            WIN_SetErrorFromHRESULT("D3D1_CreateSwapChain, IDXGIFactory2::CreateSwapChainForCoreWindow", result);
             goto done;
         }
     } else if (usingXAML) {
@@ -1384,18 +1384,18 @@
             NULL,
             &data->swapChain);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForComposition", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, IDXGIFactory2::CreateSwapChainForComposition", result);
             goto done;
         }
 
 #if WINAPI_FAMILY == WINAPI_FAMILY_APP
         result = ISwapChainBackgroundPanelNative_SetSwapChain(WINRT_GlobalSwapChainBackgroundPanelNative, (IDXGISwapChain *) data->swapChain);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ISwapChainBackgroundPanelNative::SetSwapChain", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, ISwapChainBackgroundPanelNative::SetSwapChain", result);
             goto done;
         }
 #else
-        SDL_SetError(__FUNCTION__ ", XAML support is not yet available for Windows Phone");
+        SDL_SetError("D3D11_CreateSwapChain, XAML support is not yet available for Windows Phone");
         result = E_FAIL;
         goto done;
 #endif
@@ -1414,11 +1414,11 @@
             &data->swapChain
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGIFactory2::CreateSwapChainForHwnd", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateSwapChain, IDXGIFactory2::CreateSwapChainForHwnd", result);
             goto done;
         }
 #else
-        SDL_SetError(__FUNCTION__", Unable to find something to attach a swap chain to");
+        SDL_SetError("D3D11_CreateSwapChain, Unable to find something to attach a swap chain to");
         goto done;
 #endif  /* ifdef __WIN32__ / else */
     }
@@ -1464,7 +1464,7 @@
             0
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::ResizeBuffers", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain::ResizeBuffers", result);
             goto done;
         }
 #endif
@@ -1485,7 +1485,7 @@
     if (data->swapEffect == DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL) {
         result = IDXGISwapChain1_SetRotation(data->swapChain, data->rotation);
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain1::SetRotation", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain1::SetRotation", result);
             goto done;
         }
     }
@@ -1497,7 +1497,7 @@
         &backBuffer
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::GetBuffer [back-buffer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, IDXGISwapChain::GetBuffer [back-buffer]", result);
         goto done;
     }
 
@@ -1508,7 +1508,7 @@
         &data->mainRenderTargetView
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device::CreateRenderTargetView", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateWindowSizeDependentResources, ID3D11Device::CreateRenderTargetView", result);
         goto done;
     }
 
@@ -1628,7 +1628,7 @@
         );
     if (FAILED(result)) {
         D3D11_DestroyTexture(renderer, texture);
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+        WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
         return -1;
     }
 
@@ -1646,7 +1646,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
             return -1;
         }
 
@@ -1657,7 +1657,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D", result);
+            WIN_SetErrorFromHRESULT("D3D11_CreateTexture, ID3D11Device1::CreateTexture2D", result);
             return -1;
         }
     }
@@ -1673,7 +1673,7 @@
         );
     if (FAILED(result)) {
         D3D11_DestroyTexture(renderer, texture);
-        WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+        WIN_SetErrorFromHRESULT("D3D11CCreateTexture ID3D11Device1::CreateShaderResourceView", result);
         return -1;
     }
 
@@ -1685,7 +1685,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture ID3D11Device1::CreateShaderResourceView", result);
             return -1;
         }
         result = ID3D11Device_CreateShaderResourceView(rendererData->d3dDevice,
@@ -1695,7 +1695,7 @@
             );
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ "ID3D11Device1::CreateShaderResourceView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture ID3D11Device1::CreateShaderResourceView", result);
             return -1;
         }
     }
@@ -1712,7 +1712,7 @@
             &textureData->mainTextureRenderTargetView);
         if (FAILED(result)) {
             D3D11_DestroyTexture(renderer, texture);
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateRenderTargetView", result);
+            WIN_SetErrorFromHRESULT("D3D11CreateTexture, ID3D11Device1::CreateRenderTargetView", result);
             return -1;
         }
     }
@@ -1768,7 +1768,7 @@
         NULL,
         &stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_UpdateTextureInternal, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         return -1;
     }
 
@@ -1781,7 +1781,7 @@
         &textureMemory
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_UpdateTextureInternal, ID3D11DeviceContext1::Map [map staging texture]", result);
         SAFE_RELEASE(stagingTexture);
         return -1;
     }
@@ -1943,7 +1943,7 @@
         NULL,
         &textureData->stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_LockTexture, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         return -1;
     }
 
@@ -1956,7 +1956,7 @@
         &textureMemory
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_LockTexture, ID3D11DeviceContext1::Map [map staging texture]", result);
         SAFE_RELEASE(textureData->stagingTexture);
         return -1;
     }
@@ -2238,7 +2238,7 @@
             &mappedResource
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [vertex buffer]", result);
+            WIN_SetErrorFromHRESULT("D3D11_UpdateVertexBuffer, ID3D11DeviceContext1::Map [vertex buffer]", result);
             return -1;
         }
         SDL_memcpy(mappedResource.pData, vertexData, dataSizeInBytes);
@@ -2262,7 +2262,7 @@
             &rendererData->vertexBuffer
             );
         if (FAILED(result)) {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateBuffer [vertex buffer]", result);
+            WIN_SetErrorFromHRESULT("D3D11_UpdateVertexBuffer, ID3D11Device1::CreateBuffer [vertex buffer]", result);
             return -1;
         }
 
@@ -2732,7 +2732,7 @@
         &backBuffer
         );
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain1::GetBuffer [get back buffer]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, IDXGISwapChain1::GetBuffer [get back buffer]", result);
         goto done;
     }
 
@@ -2749,7 +2749,7 @@
         NULL,
         &stagingTexture);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11Device1::CreateTexture2D [create staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, ID3D11Device1::CreateTexture2D [create staging texture]", result);
         goto done;
     }
 
@@ -2781,7 +2781,7 @@
         0,
         &textureMemory);
     if (FAILED(result)) {
-        WIN_SetErrorFromHRESULT(__FUNCTION__ ", ID3D11DeviceContext1::Map [map staging texture]", result);
+        WIN_SetErrorFromHRESULT("D3D11_RenderReadPixels, ID3D11DeviceContext1::Map [map staging texture]", result);
         goto done;
     }
 
@@ -2800,7 +2800,7 @@
          * Get the error message, and attach some extra data to it.
          */
         char errorMessage[1024];
-        SDL_snprintf(errorMessage, sizeof(errorMessage), __FUNCTION__ ", Convert Pixels failed: %s", SDL_GetError());
+        SDL_snprintf(errorMessage, sizeof(errorMessage), "D3D11_RenderReadPixels, Convert Pixels failed: %s", SDL_GetError());
         SDL_SetError(errorMessage);
         goto done;
     }
@@ -2869,7 +2869,7 @@
             /* We probably went through a fullscreen <-> windowed transition */
             D3D11_CreateWindowSizeDependentResources(renderer);
         } else {
-            WIN_SetErrorFromHRESULT(__FUNCTION__ ", IDXGISwapChain::Present", result);
+            WIN_SetErrorFromHRESULT("D3D11_RenderPresent, IDXGISwapChain::Present", result);
         }
     }
 }
