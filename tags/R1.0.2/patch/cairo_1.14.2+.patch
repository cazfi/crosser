diff -Nurd cairo-1.14.2/src/cairo-win32.h cairo-1.14.2/src/cairo-win32.h
--- cairo-1.14.2/src/cairo-win32.h	2015-03-11 00:21:07.000000000 +0200
+++ cairo-1.14.2/src/cairo-win32.h	2015-10-13 22:46:48.305225285 +0300
@@ -49,6 +49,10 @@
 cairo_win32_surface_create (HDC hdc);
 
 cairo_public cairo_surface_t *
+cairo_win32_surface_create_with_format (HDC hdc,
+                                        cairo_format_t format);
+
+cairo_public cairo_surface_t *
 cairo_win32_printing_surface_create (HDC hdc);
 
 cairo_public cairo_surface_t *
diff -Nurd cairo-1.14.2/src/win32/cairo-win32-display-surface.c cairo-1.14.2/src/win32/cairo-win32-display-surface.c
--- cairo-1.14.2/src/win32/cairo-win32-display-surface.c	2015-03-11 00:21:07.000000000 +0200
+++ cairo-1.14.2/src/win32/cairo-win32-display-surface.c	2015-10-13 22:46:48.305225285 +0300
@@ -917,31 +917,41 @@
  */
 
 /**
- * cairo_win32_surface_create:
+ * cairo_win32_surface_create_with_format:
  * @hdc: the DC to create a surface for
+ * @format: format of pixels in the surface to create
  *
  * Creates a cairo surface that targets the given DC.  The DC will be
  * queried for its initial clip extents, and this will be used as the
- * size of the cairo surface.  The resulting surface will always be of
- * format %CAIRO_FORMAT_RGB24; should you need another surface format,
- * you will need to create one through
- * cairo_win32_surface_create_with_dib().
+ * size of the cairo surface.
  *
- * Return value: the newly created surface
+ * Supported formats are:
+ * %CAIRO_FORMAT_ARGB32
+ * %CAIRO_FORMAT_RGB24
  *
- * Since: 1.0
+ * Note: @format only tells cairo how to draw on the surface, not what
+ * the format of the surface is. Namely, cairo does not (and cannot)
+ * check that @hdc actually supports alpha-transparency.
+ *
+ * Return value: the newly created surface, NULL on failure
+ *
+ * Since: 1.14.3
  **/
 cairo_surface_t *
-cairo_win32_surface_create (HDC hdc)
+cairo_win32_surface_create_with_format (HDC hdc, cairo_format_t format)
 {
     cairo_win32_display_surface_t *surface;
 
-    cairo_format_t format;
     cairo_status_t status;
     cairo_device_t *device;
 
-    /* Assume that everything coming in as a HDC is RGB24 */
-    format = CAIRO_FORMAT_RGB24;
+    switch (format) {
+    default:
+	return _cairo_surface_create_in_error (_cairo_error (CAIRO_STATUS_INVALID_FORMAT));
+    case CAIRO_FORMAT_ARGB32:
+    case CAIRO_FORMAT_RGB24:
+	break;
+    }
 
     surface = malloc (sizeof (*surface));
     if (surface == NULL)
@@ -977,6 +987,28 @@
 }
 
 /**
+ * cairo_win32_surface_create:
+ * @hdc: the DC to create a surface for
+ *
+ * Creates a cairo surface that targets the given DC.  The DC will be
+ * queried for its initial clip extents, and this will be used as the
+ * size of the cairo surface.  The resulting surface will always be of
+ * format %CAIRO_FORMAT_RGB24; should you need another surface format,
+ * you will need to create one through
+ * cairo_win32_surface_create_with_format() or
+ * cairo_win32_surface_create_with_dib().
+ *
+ * Return value: the newly created surface, NULL on failure
+ *
+ * Since: 1.0
+ **/
+cairo_surface_t *
+cairo_win32_surface_create (HDC hdc)
+{
+    return cairo_win32_surface_create_with_format (hdc, CAIRO_FORMAT_RGB24);
+}
+
+/**
  * cairo_win32_surface_create_with_dib:
  * @format: format of pixels in the surface to create
  * @width: width of the surface, in pixels
@@ -1027,12 +1059,16 @@
     HDC screen_dc, ddb_dc;
     HBITMAP saved_dc_bitmap;
 
-    if (format != CAIRO_FORMAT_RGB24)
+    switch (format) {
+    default:
+/* XXX handle these eventually */
+    case CAIRO_FORMAT_A8:
+    case CAIRO_FORMAT_A1:
 	return _cairo_surface_create_in_error (_cairo_error (CAIRO_STATUS_INVALID_FORMAT));
-/* XXX handle these eventually
-	format != CAIRO_FORMAT_A8 ||
-	format != CAIRO_FORMAT_A1)
-*/
+    case CAIRO_FORMAT_ARGB32:
+    case CAIRO_FORMAT_RGB24:
+	break;
+    }
 
     if (!hdc) {
 	screen_dc = GetDC (NULL);
